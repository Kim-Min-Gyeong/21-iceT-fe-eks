// DB 영어 카테고리와 한글 표시명 매핑
export const ALGORITHM_CATEGORY_MAPPING: Record<string, string> = {
  // 기본 알고리즘
  math: '수학',
  implementation: '구현',
  dp: '다이나믹 프로그래밍',
  data_structures: '자료구조',
  graphs: '그래프 이론',
  greedy: '그리디 알고리즘',
  string: '문자열',
  bruteforcing: '브루트포스 알고리즘',
  graph_traversal: '그래프 탐색',
  sorting: '정렬',
  ad_hoc: '애드 혹',
  geometry: '기하학',
  trees: '트리',
  number_theory: '정수론',
  segtree: '세그먼트 트리',
  binary_search: '이분 탐색',
  constructive: '구성적',
  arithmetic: '산술',
  simulation: '시뮬레이션',
  prefix_sum: '누적 합',

  // 탐색 알고리즘
  bfs: '너비 우선 탐색',
  dfs: '깊이 우선 탐색',
  combinatorics: '조합론',
  case_work: '케이스 워크',
  shortest_path: '최단 경로',
  bitmask: '비트마스킹',
  hash_set: '해시 셋',
  dijkstra: '다익스트라',
  backtracking: '백트래킹',
  sweeping: '스위핑',

  // 고급 자료구조
  disjoint_set: '분리 집합',
  tree_set: '트리 셋',
  parsing: '파싱',
  dp_tree: '트리 DP',
  priority_queue: '우선순위 큐',
  divide_and_conquer: '분할 정복',
  two_pointer: '투 포인터',
  parametric_search: '매개변수 탐색',
  game_theory: '게임 이론',
  stack: '스택',
  queue: '큐',
  deque: '덱',

  // 확률 및 수학
  probability: '확률론',
  primality_test: '소수 판정',
  flow: '플로우',
  lazyprop: '레이지 프로퍼게이션',
  dp_bitfield: '비트필드 DP',
  exponentiation_by_squaring: '분할 정복을 이용한 거듭제곱',
  offline_queries: '오프라인 쿼리',
  knapsack: '배낭 문제',
  arbitrary_precision: '임의 정밀도',
  recursion: '재귀',

  // 고급 알고리즘
  coordinate_compression: '좌표 압축',
  dag: 'DAG',
  mst: '최소 스패닝 트리',
  euclidean: '유클리드 호제법',
  precomputation: '전처리',
  convex_hull: '볼록 껍질',
  sieve: '에라토스테네스의 체',
  topological_sorting: '위상 정렬',
  bipartite_matching: '이분 매칭',
  linear_algebra: '선형대수학',
  lca: '최소 공통 조상',
  inclusion_and_exclusion: '포함-배제 원리',
  hashing: '해싱',
  floyd_warshall: '플로이드-워셜',
  scc: '강한 연결 요소',
  randomization: '랜덤화',
  sparse_table: '희소 테이블',
  trie: '트라이',
  smaller_to_larger: '작은 것에서 큰 것으로',
  fft: '고속 푸리에 변환',
  line_intersection: '직선 교차',
  modular_multiplicative_inverse: '모듈러 역원',
  calculus: '미적분학',
  sqrt_decomposition: '제곱근 분할',
  geometry_3d: '3차원 기하',
  mcmf: '최소 비용 최대 플로우',
  ternary_search: '삼분 탐색',
  suffix_array: '접미사 배열',
  sliding_window: '슬라이딩 윈도우',
  heuristics: '휴리스틱',
  cht: '볼록 껍질 트릭',
  sprague_grundy: '스프라그-그런디 정리',
  centroid: '중심점',
  euler_tour_technique: '오일러 투어 테크닉',
  bitset: '비트셋',
  mitm: 'Meet in the Middle',
  permutation_cycle_decomposition: '순열 사이클 분해',
  kmp: 'KMP 알고리즘',
  pythagoras: '피타고라스 정리',
  lis: '최장 증가 부분 수열',
  hld: '헤비 라이트 분해',
  polygon_area: '다각형 넓이',
  gaussian_elimination: '가우스 소거법',
  centroid_decomposition: '센트로이드 분해',
  linearity_of_expectation: '기댓값의 선형성',
  mfmc: '최대 플로우 최소 컷',
  bipartite_graph: '이분 그래프',
  flt: '페르마의 소정리',
  physics: '물리학',
  eulerian_path: '오일러 경로',
  '2_sat': '2-SAT',
  tsp: '외판원 순회 문제',
  articulation: '단절점',
  '0_1_bfs': '0-1 BFS',
  pigeonhole_principle: '비둘기집 원리',
  biconnected_component: '이중 연결 요소',
  pst: '영구 세그먼트 트리',
  euler_phi: '오일러 파이 함수',
  planar_graph: '평면 그래프',
  point_in_convex_polygon: '볼록 다각형 내부 점 판정',
  crt: '중국인의 나머지 정리',
  linked_list: '연결 리스트',
  deque_trick: '덱 트릭',
  bellman_ford: '벨만-포드',
  cactus: '선인장 그래프',
  splay_tree: '스플레이 트리',
  extended_euclidean: '확장 유클리드 호제법',
  divide_and_conquer_optimization: '분할 정복 최적화',
  mo: '모스 알고리즘',
  flood_fill: '플러드 필',
  functional_graph: '함수형 그래프',
  pbs: '병렬 이분 탐색',
  rotating_calipers: '회전하는 캘리퍼스',
  euler_characteristic: '오일러 특성수',
  half_plane_intersection: '반평면 교집합',
  aho_corasick: '아호-코라식',
  generating_function: '생성함수',
  multi_segtree: '다차원 세그먼트 트리',
  slope_trick: '기울기 트릭',
  regex: '정규 표현식',
  dp_deque: '덱을 이용한 DP 최적화',
  pollard_rho: '폴라드 로 알고리즘',
  tree_isomorphism: '트리 동형사상',
  manacher: '매내처 알고리즘',
  merge_sort_tree: '머지 소트 트리',
  dp_sum_over_subsets: '부분집합의 합 DP',
  miller_rabin: '밀러-라빈 소수 판정법',
  mobius_inversion: '뫼비우스 역변환',
  simulated_annealing: '시뮬레이티드 어닐링',
  dp_connection_profile: '연결 프로파일 DP',
  point_in_non_convex_polygon: '비볼록 다각형 내부 점 판정',
  link_cut_tree: '링크/컷 트리',
  berlekamp_massey: '벌레캄프-매시 알고리즘',
  hall: '홀의 결혼 정리',
  offline_dynamic_connectivity: '오프라인 동적 연결성',
  dp_digit: '자릿수 DP',
  hungarian: '헝가리안 알고리즘',
  rabin_karp: '라빈-카프',
  statistics: '통계학',
  numerical_analysis: '수치해석',
  alien: '에일리언 트릭',
  linear_programming: '선형 계획법',
  z: 'Z 알고리즘',
  voronoi: '보로노이 다이어그램',
  circulation: '순환',
  geometric_boolean_operations: '기하 불린 연산',
  lucas: '뤼카 정리',
  tree_compression: '트리 압축',
  green: '그린 정리',
  dual_graph: '쌍대 그래프',
  duality: '쌍대성',
  cartesian_tree: '카테시안 트리',
  general_matching: '일반 매칭',
  matroid: '매트로이드',
  monotone_queue_optimization: '단조 큐 최적화',
  kitamasa: '키타마사 방법',
  discrete_log: '이산 로그',
  pick: '픽의 정리',
  geometry_hyper: '고차원 기하',
  tree_decomposition: '트리 분해',
  burnside: '번사이드 보조정리',
  suffix_tree: '접미사 트리',
  bidirectional_search: '양방향 탐색',
  min_enclosing_circle: '최소 외접원',
  dominator_tree: '지배자 트리',
  palindrome_tree: '팰린드롬 트리',
  polynomial_interpolation: '다항식 보간법',
  differential_cryptanalysis: '차분 암호 해독법',
  utf8: 'UTF-8',
  knuth_x: '크누스 X',
  top_tree: '탑 트리',
  dancing_links: '댄싱 링크',
  degree_sequence: '차수 수열',
  stable_marriage: '안정 결혼 문제',
  lgv: 'LGV 보조정리',
  rope: '로프',
  bayes: '베이즈 정리',
  knuth: '크누스 최적화',
  delaunay: '들로네 삼각분할',
  gradient_descent: '경사 하강법',
  hirschberg: '허쉬버그 알고리즘',
  chordal_graph: '현 그래프',
  discrete_sqrt: '이산 제곱근',
  multipoint_evaluation: '다점 계산',
  lte: '리프팅 디 익스포넌트',
  birthday: '생일 역설',
  floor_sum: '플로어 합',
  directed_mst: '방향 MST',
  stoer_wagner: '스토어-바그너',
  hackenbush: '해켄부시',
  majority_vote: '다수결 투표',
  rb_tree: '레드-블랙 트리',
  a_star: 'A* 알고리즘',
  discrete_kth_root: '이산 k제곱근',
};
